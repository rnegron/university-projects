What is/are the critical regions of the program?
    The critical regions of the program is contained in the access to the
    deque using append() or popleft().

What was used to protect the critical regions and to avoid race conditions?
    Three semaphore synchronization primitive were used to avoid two threads
    entering their critical regions as the same time. One served as a sort of
    mutex which protected the state of the deque from being compromised. The
    other two semaphores maintain control over the resources: empty places in
    the deque and the items themselves.


What was used to block the consumers until there is data in the queue?
    Two semaphores were used to control access to the resources. The consumer
    will block on the 'self.full_semaphore.acquire()' call until there is
    an item, since full_semaphore is initialized to 0. Once the producer
    puts an item, it will call 'full_semaphore.release()' and unblock the
    consumer.
